"use strict";(self.webpackChunkapp_wheel_docs=self.webpackChunkapp_wheel_docs||[]).push([[655],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),h=i,g=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return t?r.createElement(g,a(a({ref:n},u),{},{components:t})):r.createElement(g,a({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9244:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={sidebar_position:2,title:"Android Integration Documentation",id:"Android-Integration-Documentation"},l="Android Integration Documentation (External Use)",c={unversionedId:"AppWheel/Android-Integration-Documentation",id:"AppWheel/Android-Integration-Documentation",title:"Android Integration Documentation",description:"1. Installation",source:"@site/docs/AppWheel/Android Integration Documentation.md",sourceDirName:"AppWheel",slug:"/AppWheel/Android-Integration-Documentation",permalink:"/docs/AppWheel/Android-Integration-Documentation",editUrl:"https://https://github.com/Pixocial/AppWheel-Docs/docs/AppWheel/Android Integration Documentation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Android Integration Documentation",id:"Android-Integration-Documentation"},sidebar:"tutorialSidebar",previous:{title:"AppWheel SDK Integration Document",permalink:"/docs/AppWheel/AppWheel-SDK-Integration-Document"},next:{title:"iOS Integration Document",permalink:"/docs/AppWheel/iOS-Integration-Document"}},u={},d=[{value:"1. Installation",id:"1-installation",level:2},{value:"Description:",id:"description",level:3},{value:"2. SDK Initialization",id:"2-sdk-initialization",level:2},{value:"Description:",id:"description-1",level:3},{value:"Parameters:",id:"parameters",level:3},{value:"3. Get Products",id:"3-get-products",level:2},{value:"Description:",id:"description-2",level:3},{value:"Parameters:",id:"parameters-1",level:3},{value:"4. Purchase Products",id:"4-purchase-products",level:2},{value:"Description:",id:"description-3",level:3},{value:"Parameters:",id:"parameters-2",level:3},{value:"Consumption",id:"consumption",level:3},{value:"Description:",id:"description-4",level:4},{value:"Parameters:",id:"parameters-3",level:4},{value:"5. Restore Purchase",id:"5-restore-purchase",level:2},{value:"Description:",id:"description-5",level:3},{value:"6. View User Benefits",id:"6-view-user-benefits",level:2},{value:"Obtain the current valid orders",id:"obtain-the-current-valid-orders",level:3},{value:"Description:",id:"description-6",level:4},{value:"Obtain current subscription",id:"obtain-current-subscription",level:3},{value:"Description:",id:"description-7",level:4},{value:"7. Adding a global listener",id:"7-adding-a-global-listener",level:2},{value:"Description:",id:"description-8",level:3},{value:"For more functions, please refer to the document: AppWheel SDK Integration Document - Android",id:"for-more-functions-please-refer-to-the-document-appwheel-sdk-integration-document---android",level:2}],p={toc:d};function h(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"android-integration-documentation-external-use"},"Android Integration Documentation (External Use)"),(0,o.kt)("h2",{id:"1-installation"},"1. Installation"),(0,o.kt)("h3",{id:"description"},"Description:"),(0,o.kt)("p",null," This SDK is hosted on Maven, and we recommend using gradle to install this SDK.\nAdd the following code to the project.gradle file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gradle"},"repositories {\n   ...\n   google()\n   jcenter()\n}\n\ndependencies {\n   ...\n   classpath 'com.google.gms:google-services:4.2.0'\n}\n\nallprojects {\n   repositories {\n       google()\n       jcenter()\n   }\n}\n\n")),(0,o.kt)("p",null,"Add the following code to the app.gradle file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-gradle"},"\napply plugin: 'com.google.gms.google-services'\n\nimplementation 'com.github.pixocial:purchases:1.xxx'\n\n")),(0,o.kt)("h2",{id:"2-sdk-initialization"},"2. SDK Initialization"),(0,o.kt)("h3",{id:"description-1"},"Description:"),(0,o.kt)("p",null," The SDK initialization method is as follows. Please initialize the SDK in your app as soon as possible according to your own situation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'///Older than version 1.0.5.6\n//Initialize the configuration in Application - oncreate. The appId refers to the ID you received when registering. \nBilling.configure(context ,"appid" , appUserId , \nnew OnBillingClientSetupFinishedListener(){\n    @Override\n    public void onBillingSetupFinished(int billingResponseCode) {\n        super.onBillingSetupFinished(billingResponseCode);\n    }\n});\n///Version 1.0.5.6 or later\nBilling.configure(context ,"appid" , secret,appUserId , \nnew OnBillingClientSetupFinishedListener(){\n    @Override\n    public void onBillingSetupFinished(int billingResponseCode) {\n        super.onBillingSetupFinished(billingResponseCode);\n    }\n});\n\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'\n///Older than version 1.0.5.6\n//Initialize the configuration in Application - oncreate. The appId refers to the ID you received when registering. \nBilling.configure(context ,"appid" , appUserId , listener)\n///Version 1.0.5.6 or later\nBilling.configure(context ,"appid" , secret, appUserId , listener)\n')),(0,o.kt)("h3",{id:"parameters"},"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"appId: Generated by AW. For the generation steps, please refer to the document: New Application (External Use)"),(0,o.kt)("li",{parentName:"ul"},"secret: Added in V1.0.5.6 and is generated by AW. For the generation steps, please refer to the document: New Application (External Use)"),(0,o.kt)("li",{parentName:"ul"},"uid: userId value should not be empty."),(0,o.kt)("li",{parentName:"ul"},"listener: Initialized listener, which can be empty value. After initialization, the callback result will be successfully returned.\nonBillingSetupFinished method")),(0,o.kt)("h2",{id:"3-get-products"},"3. Get Products"),(0,o.kt)("h3",{id:"description-2"},"Description:"),(0,o.kt)("p",null," This method is used to acquire product information. The product information should be loaded before displaying product page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Market.getInstance().getProductsInfo(itemType, skuList, new OnQueryProductListener() {\n    @Override\n    public void onSuccess(List<Product> productInfo) {\n    }\n\n    @Override\n    public void onError(int resultCode) {\n\n    }\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"Market.getInstance().getProductsInfo(itemType, skuList, object : OnQueryProductListener {\n    override fun onSuccess(productInfo: List<Product>) {\n        \n    }\n    override fun onError(resultCode: Int) {\n        \n    }\n})\n")),(0,o.kt)("h3",{id:"parameters-1"},"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"itemType: SKU types, including INAPP and SUBS."),(0,o.kt)("li",{parentName:"ul"},"skuList : Collection of SKU IDs.\nReturn:\nWhen the request is successful, the collection of Products will be returned through the onSuccess method.")),(0,o.kt)("h2",{id:"4-purchase-products"},"4. Purchase Products"),(0,o.kt)("h3",{id:"description-3"},"Description:"),(0,o.kt)("p",null," This method should be called to complete a purchase when a user has selected a product. The developers should tell the product type before calling this method and then pass the productType to complete the purchase."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Market.getInstance().purchaseProduct(ProductDetailActivity.this, mProduct, new InitiatePurchaseListener() {\n    @Override\n    public void onVerifying(boolean isVerifying) {\n       // Callback of onging verification in the backend\n    }\n\n    @Override\n    public void onPurchaseSuccess(MTGPurchase purchase) {\n       //Purchase success callback\n   }\n\n    @Override\n    public void onOwnedGoods(MTGPurchase purchase) {\n       //Purchased status callback\n    }\n\n    @Override\n    public void onPurchaseError(int errorCode) {\n       //Callback of abnormal purchases\n    }\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"Market.getInstance().purchaseProduct(activity, mProduct, object : InitiatePurchaseListener {\n    override fun onVerifying(isVerifying: Boolean) {\n        //Callback of ongoing backend verification\n    }\n\n    override fun onPurchaseSuccess(purchase: MTGPurchase) {\n        //Purchase success callback\n    }\n\n    override fun onOwnedGoods(purchase: MTGPurchase) {\n        //Purchased status callback\n    }\n\n    override fun onPurchaseError(errorCode: Int) {\n        //Callback of abnormal purchases\n    }\n})\n")),(0,o.kt)("h3",{id:"parameters-2"},"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"product: Products to be purchased")),(0,o.kt)("h3",{id:"consumption"},"Consumption"),(0,o.kt)("h4",{id:"description-4"},"Description:"),(0,o.kt)("p",null," The paymentType for INAPP products is 2 and there is no need to use this interface for subscription products. If the purchased INAPP products are not consumed, then cannot be purchased again until they are consumed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Market.getInstance().consumePurchaseFlow(purchase, new ConsumeResponseListener() {\n    @Override\n    public void onConsumeResponse(int resultCode) {\n        if(resultCode == Types.BillingResponseCode.OK){\n            BillingLog.i(TAG , "consumeMembership Success -" + purchase.getProductId());\n        }\n    }\n});\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'Market.getInstance().consumePurchaseFlow(purchase, object : ConsumeResponseListener() {\n    fun onConsumeResponse(resultCode: Int) {\n        if (resultCode == Types.BillingResponseCode.OK) {\n            BillingLog.i(TAG, "consumeMembership Success -" + purchase.getProductId())\n        }\n    }\n})\n')),(0,o.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"purchase: MTGPurchase type. Please choose the corresponding purchase value according to the products you need.")),(0,o.kt)("h2",{id:"5-restore-purchase"},"5. Restore Purchase"),(0,o.kt)("h3",{id:"description-5"},"Description:"),(0,o.kt)("p",null," This is used to restore valid subscriptions, non-consumable products, and non-renewable products for a user. When there is no valid subscription, the 'success' in the block will return a false value. Calling this interface will directly call the AppleService verification interface. There is a quota restriction for this interface for each app, ",(0,o.kt)("font",{color:"red"}," ",(0,o.kt)("strong",{parentName:"p"},"so it is strictly prohibited to call when starting the app and to call it too frequently."))," It is recommended to call it only when the purchase information fails to be inquired because the user changed their phone or reinstalled the app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Market.getInstance().restorePurchase(new OnRestorePurchaseListener() {\n    @Override\n    public void onSuccess(List<MTGPurchase> purchases) {\n    }\n\n    @Override\n    public void onError(int resultCode) {\n    }\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"Market.getInstance().restorePurchase(object : OnRestorePurchaseListener {\n    override fun onSuccess(purchases: List<MTGPurchase>) {\n    }\n    override fun onError(resultCode: Int) {\n    }\n})\n")),(0,o.kt)("h2",{id:"6-view-user-benefits"},"6. View User Benefits"),(0,o.kt)("p",null," The following method is used to check a user's existing purchased products."),(0,o.kt)("h3",{id:"obtain-the-current-valid-orders"},"Obtain the current valid orders"),(0,o.kt)("h4",{id:"description-6"},"Description:"),(0,o.kt)("p",null," The following method is used to check a user's existing valid orders, including valid subscription and unconsumed INAPP products."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"UserOrderManager.getProvider().getOrders()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"UserOrderManager.getProvider().getOrders()\n")),(0,o.kt)("h3",{id:"obtain-current-subscription"},"Obtain current subscription"),(0,o.kt)("h4",{id:"description-7"},"Description:"),(0,o.kt)("p",null," This method is used to obtain a user's existing valid subscription. If there is no valid subscription, an empty result will be returned."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"SubsPurchase recentSubsPurchase = UserOrderManager.getProvider().getRecentSubsPurchase();\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val recentSubsPurchase = UserOrderManager.getProvider().recentSubsPurchase\n")),(0,o.kt)("h2",{id:"7-adding-a-global-listener"},"7. Adding a global listener"),(0,o.kt)("h3",{id:"description-8"},"Description:"),(0,o.kt)("p",null," This method is used to add a global listener, which will be called after purchase, subscription renewal, and/or restoring purchases. Developers should set up listeners as soon as possible after initialization for callbacks in a timely manner."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"///Adding a listener\nUserOrderManager.getProvider().addPurchaseObserver(new OrderObserver() {\n    @Override\n    public void onUpdateOrders(List<MTGPurchase> purchases) {\n        // Monitor order changes\n    }\n});\n///Remove listener\nUserOrderManager.getProvider().removePurchaseObserver(orderObserver);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"///Adding a listener\nUserOrderManager.getProvider().addPurchaseObserver {\n    //Monitoring order changes\n} \n///Remove listener\nUserOrderManager.getProvider().removePurchaseObserver(orderObserver)\n")),(0,o.kt)("h2",{id:"for-more-functions-please-refer-to-the-document-appwheel-sdk-integration-document---android"},"For more functions, please refer to the document: AppWheel SDK Integration Document - Android"))}h.isMDXComponent=!0}}]);