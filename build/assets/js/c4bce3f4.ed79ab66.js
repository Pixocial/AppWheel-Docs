"use strict";(self.webpackChunkapp_wheel_docs=self.webpackChunkapp_wheel_docs||[]).push([[467],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,g=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4322:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:1,title:"AppWheel SDK Integration Document",id:"AppWheel-SDK-Integration-Document"},l="AppWheel SDK Integration Document",c={unversionedId:"AppWheel/AppWheel-SDK-Integration-Document",id:"AppWheel/AppWheel-SDK-Integration-Document",title:"AppWheel SDK Integration Document",description:"Overall Process",source:"@site/docs/AppWheel/AppWheel SDK Integration Document.md",sourceDirName:"AppWheel",slug:"/AppWheel/AppWheel-SDK-Integration-Document",permalink:"/docs/AppWheel/AppWheel-SDK-Integration-Document",editUrl:"https://https://github.com/Pixocial/AppWheel-Docs/docs/AppWheel/AppWheel SDK Integration Document.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"AppWheel SDK Integration Document",id:"AppWheel-SDK-Integration-Document"},sidebar:"tutorialSidebar",previous:{title:"Translate your site",permalink:"/docs/tutorial-extras/translate-your-site"},next:{title:"Android Integration Documentation",permalink:"/docs/AppWheel/Android-Integration-Documentation"}},u={},p=[{value:"Overall Process",id:"overall-process",level:2},{value:"iOS Integration",id:"ios-integration",level:2},{value:"Step 1: Create an app",id:"step-1-create-an-app",level:3},{value:"Step 2: Configuration",id:"step-2-configuration",level:3},{value:'Notification Receiving Configuration(<font color="red"> <strong>Important: If you have your own receiving server, please refer to the &quot;Configure Notification Receiving Server&quot;</strong></font>)',id:"notification-receiving-configuration-important-if-you-have-your-own-receiving-server-please-refer-to-the-configure-notification-receiving-server",level:4},{value:"Configure Notification Receiving Server",id:"configure-notification-receiving-server",level:4},{value:"p8 file configuration for purchasing discounted products",id:"p8-file-configuration-for-purchasing-discounted-products",level:4},{value:"Product Configuration",id:"product-configuration",level:4},{value:"Step 3: SDK interface integration",id:"step-3-sdk-interface-integration",level:3},{value:"1. Installation",id:"1-installation",level:4},{value:"2. Initialize",id:"2-initialize",level:4},{value:"Parameters:",id:"parameters",level:5},{value:"3. Get Products",id:"3-get-products",level:4},{value:"Parameters:",id:"parameters-1",level:5},{value:"Return:",id:"return",level:5},{value:"4. Purchase Products",id:"4-purchase-products",level:4},{value:"Parameters:",id:"parameters-2",level:5},{value:"5. Restore Purchase",id:"5-restore-purchase",level:4},{value:"6. View User Benefits",id:"6-view-user-benefits",level:4},{value:"7. Adding a global listener",id:"7-adding-a-global-listener",level:4},{value:"Step 4: Acceptance Inspection",id:"step-4-acceptance-inspection",level:3},{value:"Other steps: Integration of advanced features",id:"other-steps-integration-of-advanced-features",level:3},{value:"Voucher machine",id:"voucher-machine",level:4},{value:"Obtain coupons",id:"obtain-coupons",level:5},{value:"Consume coupon code",id:"consume-coupon-code",level:5},{value:"Android Integration",id:"android-integration",level:2},{value:"Step 1: Create an app",id:"step-1-create-an-app-1",level:3},{value:"Step 2: Configuration",id:"step-2-configuration-1",level:3},{value:'Notification Receiving Configuration (<font color="red"> <strong>Important: If you have your own receiving server, please refer to the &quot;Configure Notification Receiving Server&quot;</strong></font>)',id:"notification-receiving-configuration--important-if-you-have-your-own-receiving-server-please-refer-to-the-configure-notification-receiving-server",level:4},{value:"Configure Notification Receiving Server",id:"configure-notification-receiving-server-1",level:4},{value:"Product Configuration",id:"product-configuration-1",level:4},{value:"There&#39;s already a product configuration",id:"theres-already-a-product-configuration",level:5},{value:"No product configuration",id:"no-product-configuration",level:5},{value:"Step 3: Android SDK interface integration",id:"step-3-android-sdk-interface-integration",level:3},{value:"Installation",id:"installation",level:4},{value:"Initialize",id:"initialize",level:4},{value:"Get Products",id:"get-products",level:4},{value:"Purchase Products",id:"purchase-products",level:4},{value:"Restore Purchase",id:"restore-purchase",level:4},{value:"View User Benefits",id:"view-user-benefits",level:4},{value:"Adding a global listener",id:"adding-a-global-listener",level:4},{value:"Step 4: Acceptance Inspection",id:"step-4-acceptance-inspection-1",level:3},{value:"Other steps: Integration of advanced features",id:"other-steps-integration-of-advanced-features-1",level:3}],d={toc:p};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"appwheel-sdk-integration-document"},"AppWheel SDK Integration Document"),(0,a.kt)("h2",{id:"overall-process"},"Overall Process"),(0,a.kt)("p",null,"\uff08\u6b20\u7f3a\u6d41\u7a0b\u56fe\uff0c\u56e0\u4e3a\u73b0\u5728\u6ca1\u6709\u4ed3\u5e93\u653e\uff09"),(0,a.kt)("h2",{id:"ios-integration"},"iOS Integration"),(0,a.kt)("h3",{id:"step-1-create-an-app"},"Step 1: Create an app"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"App name:")," The name of your app"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Store:")," The platform that is divided into Android and iOS, and you should select iOS in this case."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"App Bundle ID:")," bundleID is the identifier of your app in the Apple App Store, which can be obtained by viewing your app in App Store Connect."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"iTunesConnect App Specific Shared Secret:")," The shared secret, which is needed to verify the order receipt generated by your app. For the acquisition method, please refer to: ",(0,a.kt)("a",{parentName:"li",href:"https://help.apple.com/app-store-connect/#/devf341c0f01"},"https://help.apple.com/app-store-connect/#/devf341c0f01"),". There are two shared keys: One is the shared key for all apps; the other is a shared key for a single app. A shared key for a single app is recommended.")),(0,a.kt)("h3",{id:"step-2-configuration"},"Step 2: Configuration"),(0,a.kt)("h4",{id:"notification-receiving-configuration-important-if-you-have-your-own-receiving-server-please-refer-to-the-configure-notification-receiving-server"},"Notification Receiving Configuration(",(0,a.kt)("font",{color:"red"}," ",(0,a.kt)("strong",{parentName:"h4"},'Important: If you have your own receiving server, please refer to the "Configure Notification Receiving Server"')),")"),(0,a.kt)("p",null,"To send Apple server notifications to Appwheel, please configure the following address (",(0,a.kt)("a",{parentName:"p",href:"https://msgserver-dot-subscription-saas.uc.r.appspot.com/subcenter/receive_ios_notification"},"https://msgserver-dot-subscription-saas.uc.r.appspot.com/subcenter/receive_ios_notification"),") to Apple Store Connect: (Currently supports V1 type notifications)"),(0,a.kt)("h4",{id:"configure-notification-receiving-server"},"Configure Notification Receiving Server"),(0,a.kt)("p",null,"\u25aa If you have your own notification receiving server that needs the push data, you can set the receiving server address in the AppWheel main site. We will send each message once in the order in which the messages arrive, but sometimes the messages may not be delivered in sequence, or will be transmitted multiple times. You should design the program in the way of idempotent processing."),(0,a.kt)("p",null,"\uffee After the configuration is complete, you can test the availability of the address. The configuration must be consistent with the requirements, that is, accept the request of the POST method, return 200 Http status code after successful processing, and return 400 or 500 status code when processing fails. In addition, because there is no actual business data body in the test, the 200 http status code can be returned when empty data is received."),(0,a.kt)("h4",{id:"p8-file-configuration-for-purchasing-discounted-products"},"p8 file configuration for purchasing discounted products"),(0,a.kt)("p",null,"When your app has a discount set in the Apple App Store, and you want to sync the information to AppWheel, you need to set the p8 file in AppWheel\u3002\n<todo\uff1a\u7f3a\u4e86\u4e00\u5f20\u56fe\uff0c\u56e0\u4e3a\u6ca1\u6709\u4ed3\u5e93\u653e>\n",(0,a.kt)("strong",{parentName:"p"},"Service Account credentials JSON:")," A file with a .p8 suffix, commonly called a p8 file. When you need to enable the subscription discount function, you need to have a signature for the discount, and the p8 file is an essential key to generate this signature. Obtain it through: ",(0,a.kt)("a",{parentName:"p",href:"https://help.apple.com/app-store-connect/#/dev689c93225%5D"},"https://help.apple.com/app-store-connect/#/dev689c93225")),(0,a.kt)("h4",{id:"product-configuration"},"Product Configuration"),(0,a.kt)("p",null,"\u25aa There's already a product configuration\n\u25aa No product configuration"),(0,a.kt)("h3",{id:"step-3-sdk-interface-integration"},"Step 3: SDK interface integration"),(0,a.kt)("h4",{id:"1-installation"},"1. Installation"),(0,a.kt)("p",null,"The integration should be done with CocoaPods and the following orders should be added to Podfile."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"pod 'AppWheel'\n")),(0,a.kt)("p",null,"The latest version can be obtained through the official website or by executing pod search AppWheel.\nAll methods support Swift calls. Please add the following sentences to the Bridging-Header file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"import <PurchaseSDK/AWPurchaseKit.h>\n")),(0,a.kt)("font",{color:"red"},"Note: This SDK only supports the real machine rather than a simulator."),(0,a.kt)("h4",{id:"2-initialize"},"2. Initialize"),(0,a.kt)("p",null,"Requirements:\nThe SDK initialization method is as follows. Please initialize the SDK in your app as soon as possible according to your own situation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"AWPurchaseKit configureWithAppId:appid uid:userId completion:^(BOOL success, AWError * _Nonnull error) {\n    if (success) {\n      //init success ,do something\n    } else {\n      // init failed,check error\n    }\n  }\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.configure(withAppId: appId, uid: uid) { [weak self](success, error) in\n      if success == false {\n        // init failed,check error\n      } else {\n        //init success ,do something\n      }\n    }\n")),(0,a.kt)("h5",{id:"parameters"},"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"appId: Generated by the server of the subscription center. For the generation steps, please refer to the document: New Application (External Use) "),(0,a.kt)("li",{parentName:"ul"},"uid: userId, no empty string for transferring"),(0,a.kt)("li",{parentName:"ul"},"completion: Initialization result's block. Returns 'true' if initialization is successful; returns 'false' if not. This component can not be used in the case of configuration failure. ")),(0,a.kt)("h4",{id:"3-get-products"},"3. Get Products"),(0,a.kt)("p",null,"Requirements:\nThis method is used to acquire product information. The product information should be loaded before displaying product page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[AWPurchaseKit getProductsInfoWithProductIdentifiers:self.skuSet completion:^(RetrievedProducts * _Nonnull retrievedProducts) {\n      if (retrievedProducts.error) {\n       // request error,check error msg\n        return;\n      }\n      if (retrievedProducts.validProducts.count){\n        dispatch_async(dispatch_get_main_queue(), ^{\n        // request success, updateUI\n        //  [self updateUI];\n        });\n      }\n      if (retrievedProducts.invalidProductIdentifiers.count) {\n        //find invalid sku, check your sku\n      }\n    }];\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getProductsInfo(withProductIdentifiers: productIds) { [weak self] (result) in\n          if let error = result.error {\n            //request error,check error msg\n          } else {\n            let valid_products = result.validProducts\n            //request success, updateUI\n          }\n  }\n")),(0,a.kt)("h5",{id:"parameters-1"},"Parameters:"),(0,a.kt)("p",null,"Collection of SKU IDs."),(0,a.kt)("h5",{id:"return"},"Return:"),(0,a.kt)("p",null,"The RetrievedProducts returned includes AWProduct array of successfully obtained products, SKU array of products failed to be obtained and AWError objects.\nAWProduct Data Structure: AppWheel SDK Integration Document - Introduction to iOS Classes "),(0,a.kt)("h4",{id:"4-purchase-products"},"4. Purchase Products"),(0,a.kt)("p",null,"Requirements:\nThis method should be called to complete a purchase when a user has selected a product. The developers should tell the product type before calling this method and then pass the productType to complete the purchase."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[AWPurchaseKit purchaseProduct:product quantity:quantity productType:productType paymentDiscount:paymentDiscount completion:^(BOOL success, AWError * _Nonnull error) {\n                if (!success) {\n                  //purchase failed, check error\n                }else {\n                  //purchase success\n                }\n          }];\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.purchaseProduct(product, quantity: 1, productType: AWProductType, paymentDiscount: nil) { success, error in\n        if success {\n          //purchase success\n        } else {\n          //purchase failed, check error\n        }\n      }\n")),(0,a.kt)("h5",{id:"parameters-2"},"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"product: Products"),(0,a.kt)("li",{parentName:"ul"},"paymentDiscount: Discounts. Only for subscription products and can be acquired through Product.discounts. No transferable nil. "),(0,a.kt)("li",{parentName:"ul"},"quantity: The quantity of purchases. The quantity of subscription products is 1, as is other product types."),(0,a.kt)("li",{parentName:"ul"},"productType: Type of products. There are usually four types: 0: consumable,\n1: non-consumable, 2: auto-renewable and 3: non-renewable. Users can tell the type according to the SKU. Please refer to the AWProductType in AppWheel SDK Integration Document - Introduction to iOS Classes.")),(0,a.kt)("h4",{id:"5-restore-purchase"},"5. Restore Purchase"),(0,a.kt)("p",null,"Requirements:\nThis is used to restore valid subscriptions, non-consumable products, and non-renewable products for a user. When there is no valid subscription, the 'success' in the block will return a false value. Calling this interface will directly call the AppleService verification interface and there is a quota restriction for this interface for each app. It is strictly prohibited to call when starting the app and to call it too frequently. It is recommended to call it only when the purchase information fails to be inquired because the user changed their phone or reinstalled the app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[AWPurchaseKit restorePurchaseWithCompletion:^(BOOL success, NSArray * validSubscriptions, NSArray * purchasedItems, AWError * error) {\n    //do something\n  }];\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.restorePurchase { (success, validSubscriptions, productIds, error) in\n      //do something\n      }\n")),(0,a.kt)("h4",{id:"6-view-user-benefits"},"6. View User Benefits"),(0,a.kt)("p",null,"Telling if there is an ongoing subscription service\nRequirements:\nTell if a user has an ongoing subscription service. If yes, this method can be used to tell the benefits the user enjoys."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[[AWPurchaseKit getPurchaseInfo] isSubscriptionUnlockedUser]\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getPurchaseInfo().isSubscriptionUnlockedUser()\n")),(0,a.kt)("p",null,"Obtain the existing valid subscriptions\nRequirements:\nIt is used to tell a user's existing valid subscription."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[[AWPurchaseKit getPurchaseInfo] getCurrentValidSubscriptions]\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getPurchaseInfo().getCurrentValidSubscriptions()\n")),(0,a.kt)("p",null,"Obtain the currently owned non-consumable and non-renewable subscription products.\nRequirements:\nIt is used to obtain the consumable, non-consumable, and non-renewable subscription items currently owned by the user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[[AWPurchaseKit getPurchaseInfo] purchasedArray]\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getPurchaseInfo().purchasedArray()\n")),(0,a.kt)("h4",{id:"7-adding-a-global-listener"},"7. Adding a global listener"),(0,a.kt)("p",null,"Requirements:\nThis method is used to add a global listener, which will be called after purchase, subscription renewal, and/or restoring purchases. Developers should set up listeners as soon as possible after initialization for callbacks in a timely manner."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"///\u6dfb\u52a0\u76d1\u542c\n[AWPurchaseKit addPurchaseObserver:AWPurchaseObserver];\n///\u79fb\u9664\u76d1\u542c\n[AWPurchaseKit removePurchaseObserver:self]\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Swift"},"/// \u6dfb\u52a0\u76d1\u542c\nAWPurchaseKit.add(AWPurchaseObserver)\n///\u79fb\u9664\u76d1\u542c\nAWPurchaseKit.remove(AWPurchaseObserver)\n")),(0,a.kt)("h3",{id:"step-4-acceptance-inspection"},"Step 4: Acceptance Inspection"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u25a1 App Configuration Check"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Whether the notification is configured successfully: Check the configuration in the AppStoreConnect backend")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u25a1 App configuration is as follows")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u25a1 Whether the initialization interface is called at startup"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Whether the AppWheel SDK can get the information of purchased products"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Subscription Products"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Discount products (optional)"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Discount for new users"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Promotion offer"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Coupon"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Consumable products"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Non-consumable products"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Non-renewable products"),(0,a.kt)("li",{parentName:"ul"},"\u25a1 Whether the AppWheel SDK can restore product information")),(0,a.kt)("h3",{id:"other-steps-integration-of-advanced-features"},"Other steps: Integration of advanced features"),(0,a.kt)("h4",{id:"voucher-machine"},"Voucher machine"),(0,a.kt)("h5",{id:"obtain-coupons"},"Obtain coupons"),(0,a.kt)("p",null,"Description: Developers should request coupon information as early as possible when necessary."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"AWPurchaseKit queryCouponDetail:((^)(BOOL success,AWCouponModel * _Nullable model, AWError * _Nullable error))completion\n")),(0,a.kt)("p",null,"For the returned AWCouponModel data structure, please refer to document: AppWheel SDK Integration Document - Introduction to iOS Classes "),(0,a.kt)("h5",{id:"consume-coupon-code"},"Consume coupon code"),(0,a.kt)("p",null,"Note: The developer should report the task ID to AppWheel after displaying the coupon to complete the statistics."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Objective-C"},"AWPurchaseKit updateConponStateWithTaskId:(long)taskId\n           withCompletion:((^)(BOOL success, AWError * _Nullable error))completion\n")),(0,a.kt)("p",null,"Parameter: taskId. The value of AWCouponModel, which is obtained from calling the coupon interface."),(0,a.kt)("h2",{id:"android-integration"},"Android Integration"),(0,a.kt)("h3",{id:"step-1-create-an-app-1"},"Step 1: Create an app"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"App name"),": The name of your app"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Store"),": The platform that is divided into Android and iOS, and you should select Android in this case."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Google Play package"),": The package name of your app, which is the unique identifier of your app in the Google Play Store and can be obtained in the Google Play Console"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Service Account credentials JSON"),": The json file required by the server to verify the order. Before you obtain this file, please confirm that you have completed the necessary configuration for Google payments, which is described in the Necessary Preparation for AppWheel (Android). When you have completed the configuration, you will have a json file. Please upload this file to our backend to create your Android app accordingly.")),(0,a.kt)("h3",{id:"step-2-configuration-1"},"Step 2: Configuration"),(0,a.kt)("h4",{id:"notification-receiving-configuration--important-if-you-have-your-own-receiving-server-please-refer-to-the-configure-notification-receiving-server"},"Notification Receiving Configuration (",(0,a.kt)("font",{color:"red"}," ",(0,a.kt)("strong",{parentName:"h4"},'Important: If you have your own receiving server, please refer to the "Configure Notification Receiving Server"')),")"),(0,a.kt)("p",null,"To send Google server notifications to AppWheel, please configure the address (",(0,a.kt)("a",{parentName:"p",href:"https://msgserver-dot-subscription-saas.uc.r.appspot.com/subcenter/receive_android_notification"},"https://msgserver-dot-subscription-saas.uc.r.appspot.com/subcenter/receive_android_notification"),") on the Google Cloud Platform."),(0,a.kt)("h4",{id:"configure-notification-receiving-server-1"},"Configure Notification Receiving Server"),(0,a.kt)("p",null,"\u25aa If you have your own notification receiving server that needs the push data, you can set the receiving server address in the AppWheel main site. We will send each message once in the order in which the messages arrive, but sometimes the messages may not be delivered in sequence, or will be transmitted multiple times. You should design the program in the way of idempotent processing."),(0,a.kt)("p",null,"\u25aa After the configuration is complete, you can test the availability of the address. The configuration must be consistent with the requirements, that is, accept the request of the POST method, return 200 Http status code after successful processing, and return 400 or 500 status code when processing fails. In addition, because there is no actual business data body in the test, the 200 http status code can be returned when empty data is received."),(0,a.kt)("h4",{id:"product-configuration-1"},"Product Configuration"),(0,a.kt)("h5",{id:"theres-already-a-product-configuration"},"There's already a product configuration"),(0,a.kt)("h5",{id:"no-product-configuration"},"No product configuration"),(0,a.kt)("h3",{id:"step-3-android-sdk-interface-integration"},"Step 3: Android SDK interface integration"),(0,a.kt)("h4",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Requirements:\nThis SDK is hosted on Maven, and we recommend using gradle to install this SDK.\nAdd the following code to the project.gradle file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"}," repositories {\n    ...\n    google()\n    jcenter()\n}\n\ndependencies {\n    ...\n    classpath 'com.google.gms:google-services:4.2.0'\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n")),(0,a.kt)("p",null," Add the following code to the app.gradle file:\napply plugin: 'com.google.gms.google-services'"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"implementation 'com.github.pixocial:purchases:1.0.4'\n")),(0,a.kt)("h4",{id:"initialize"},"Initialize"),(0,a.kt)("p",null,"The SDK initialization method is as follows. Please initialize the SDK in your app as soon as possible according to your own situation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// \u5728Application\u4e2d\u7684oncreate\u4e2d\u521d\u59cb\u5316\u914d\u7f6e\uff0cappId\u4e3a\u6ce8\u518c\u5e94\u7528\u65f6\u5019\u5206\u914d\u7684\u5e94\u7528id\nBilling.configure(context ,"appid" , appUserId , \nnew OnBillingClientSetupFinishedListener(){\n    @Override\n    public void onBillingSetupFinished(int billingResponseCode) {\n        super.onBillingSetupFinished(billingResponseCode);\n    }\n});\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},'// \u5728Application\u4e2d\u7684oncreate\u4e2d\u521d\u59cb\u5316\u914d\u7f6e\uff0cappId\u4e3a\u6ce8\u518c\u5e94\u7528\u65f6\u5019\u5206\u914d\u7684\u5e94\u7528id\nBilling.configure(context ,"appid" , appUserId , listener)\n')),(0,a.kt)("p",null,"Parameters:\n\u2022 appId: Generated by the server of the subscription center. For the generation steps, please refer to the document: New Application (External Use)\n\u2022 uid: userId, no empty string for transferring\n\u2022 listener: Initialized listener, which can be empty value. After initialization, the callback result will be successfully returned.\nonBillingSetupFinished method"),(0,a.kt)("h4",{id:"get-products"},"Get Products"),(0,a.kt)("p",null,"Requirements:\nThis method is used to acquire product information. The product information should be loaded before displaying product page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Market.getInstance().getProductsInfo(itemType, skuList, new OnQueryProductListener() {\n    @Override\n    public void onSuccess(List<Product> productInfo) {\n    }\n\n    @Override\n    public void onError(int resultCode) {\n\n    }\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},"Market.getInstance().getProductsInfo(itemType, skuList, object : OnQueryProductListener {\n    override fun onSuccess(productInfo: List<Product>) {\n        \n    }\n    override fun onError(resultCode: Int) {\n        \n    }\n})\n")),(0,a.kt)("p",null,"Parameters:\n\uffee itemType: SKU types, including INAPP and SUBS.\n\uffee skuList : Collection of SKU IDs.\nReturn:\nWhen the request is successful, the collection of Products will be returned through the onSuccess method."),(0,a.kt)("h4",{id:"purchase-products"},"Purchase Products"),(0,a.kt)("p",null,"Requirements:\nThis method should be called to complete a purchase when a user has selected a product. The developers should tell the product type before calling this method and then pass the productType to complete the purchase."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Market.getInstance().purchaseProduct(ProductDetailActivity.this, mProduct, new InitiatePurchaseListener() {\n    @Override\n    public void onVerifying(boolean isVerifying) {\n       // \u540e\u53f0\u9a8c\u8bc1\u4e2d\u7684\u56de\u8c03\n    }\n\n    @Override\n    public void onPurchaseSuccess(MTGPurchase purchase) {\n       // \u8d2d\u4e70\u6210\u529f\u56de\u8c03\n   }\n\n    @Override\n    public void onOwnedGoods(MTGPurchase purchase) {\n       // \u5df2\u8d2d\u4e70\u72b6\u6001\u56de\u8c03\n    }\n\n    @Override\n    public void onPurchaseError(int errorCode) {\n       // \u8d2d\u4e70\u5f02\u5e38\u56de\u8c03\n    }\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},"Market.getInstance().purchaseProduct(activity, mProduct, object : InitiatePurchaseListener {\n    override fun onVerifying(isVerifying: Boolean) {\n        // \u5207\u6362\u540e\u53f0\u9a8c\u8bc1\u72b6\u6001\u56de\u8c03\n    }\n\n    override fun onPurchaseSuccess(purchase: MTGPurchase) {\n        // \u8d2d\u4e70\u6210\u529f\u56de\u8c03\n    }\n\n    override fun onOwnedGoods(purchase: MTGPurchase) {\n        // \u5df2\u8d2d\u4e70\u72b6\u6001\u56de\u8c03\n    }\n\n    override fun onPurchaseError(errorCode: Int) {\n        // \u8d2d\u4e70\u5f02\u5e38\u56de\u8c03\n    }\n})\n")),(0,a.kt)("p",null,"Parameters:\n\uffee product: Products to be purchased\nConsumption\nRequirements:\nThe paymentType for INAPP products is 2 and there is no need to use this interface for subscription products. If the purchased INAPP products are not consumed, then cannot be purchased again until they are consumed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'Market.getInstance().consumePurchaseFlow(purchase, new ConsumeResponseListener() {\n    @Override\n    public void onConsumeResponse(int resultCode) {\n        if(resultCode == Types.BillingResponseCode.OK){\n            BillingLog.i(TAG , "consumeMembership Success -" + purchase.getProductId());\n        }\n    }\n});\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},'Market.getInstance().consumePurchaseFlow(purchase, object : ConsumeResponseListener() {\n    fun onConsumeResponse(resultCode: Int) {\n        if (resultCode == Types.BillingResponseCode.OK) {\n            BillingLog.i(TAG, "consumeMembership Success -" + purchase.getProductId())\n        }\n    }\n})\n')),(0,a.kt)("p",null,"Parameters:\n\uffee purchase: MTGPurchase type. Please choose the corresponding purchase value according to the products you need."),(0,a.kt)("h4",{id:"restore-purchase"},"Restore Purchase"),(0,a.kt)("p",null,"Requirements:\nThis is used to restore valid subscriptions, non-consumable products, and non-renewable products for a user. When there is no valid subscription, the 'success' in the block will return a false value. Calling this interface will directly call the AppleService verification interface and there is a quota restriction for this interface for each app. It is strictly prohibited to call when starting the app and to call it too frequently. It is recommended to call it only when the purchase information fails to be inquired because the user changed their phone or reinstalled the app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Market.getInstance().restorePurchase(new OnRestorePurchaseListener() {\n    @Override\n    public void onSuccess(List<MTGPurchase> purchases) {\n    }\n\n    @Override\n    public void onError(int resultCode) {\n    }\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},"Market.getInstance().restorePurchase(object : OnRestorePurchaseListener {\n    override fun onSuccess(purchases: List<MTGPurchase>) {\n    }\n    override fun onError(resultCode: Int) {\n    }\n})\n")),(0,a.kt)("h4",{id:"view-user-benefits"},"View User Benefits"),(0,a.kt)("p",null,"The following method is used to check a user's existing purchased products.\nObtain the current valid orders\nRequirements:\nThe following method is used to check a user's existing valid orders, including valid subscription and unconsumed INAPP products."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"UserOrderManager.getProvider().getOrders()\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},"UserOrderManager.getProvider().getOrders()\n")),(0,a.kt)("p",null,"Obtain current subscription\nRequirements:\nThis method is used to obtain a user's existing valid subscription. If there is no valid subscription, an empty result will be returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"SubsPurchase recentSubsPurchase = UserOrderManager.getProvider().getRecentSubsPurchase();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},"val recentSubsPurchase = UserOrderManager.getProvider().recentSubsPurchase\n")),(0,a.kt)("h4",{id:"adding-a-global-listener"},"Adding a global listener"),(0,a.kt)("p",null,"Requirements:\nThis method is used to add a global listener, which will be called after purchase, subscription renewal, and/or restoring purchases. Developers should set up listeners as soon as possible after initialization for callbacks in a timely manner."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/// \u6dfb\u52a0\u76d1\u542c\nUserOrderManager.getProvider().addPurchaseObserver(new OrderObserver() {\n    @Override\n    public void onUpdateOrders(List<MTGPurchase> purchases) {\n        // \u5728\u8fd9\u91cc\u76d1\u542c\u8ba2\u5355\u53d8\u5316\u60c5\u51b5\n    }\n});\n///\u79fb\u9664\u76d1\u542c\nUserOrderManager.getProvider().removePurchaseObserver(orderObserver);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Kotlin"},"/// \u6dfb\u52a0\u76d1\u542c\nUserOrderManager.getProvider().addPurchaseObserver {\n    // \u5ba2\u6237\u7aef\u5728\u8fd9\u91cc\u76d1\u542c\u4e2d\u53f0\u7684\u8ba2\u5355\u53d8\u5316\u60c5\u51b5\n} \n///\u79fb\u9664\u76d1\u542c\nUserOrderManager.getProvider().removePurchaseObserver(orderObserver)\n")),(0,a.kt)("h3",{id:"step-4-acceptance-inspection-1"},"Step 4: Acceptance Inspection"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 App Configuration Check")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 To make sure a notification is configured successfully: Check if the Google Cloud Pub/Sub queue has notification settings")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 The basic configuration is as follows")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 Whether the initialization interface is called at startup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 Whether the AppWheel SDK can get the information of purchased products")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 Subscription Products")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 In-App Products")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 Discount products (optional)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 Single Payment Products")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 Recurring Payment Products")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u25a1 Whether the AppWheel SDK can restore product information"))),(0,a.kt)("h3",{id:"other-steps-integration-of-advanced-features-1"},"Other steps: Integration of advanced features"))}h.isMDXComponent=!0}}]);