"use strict";(self.webpackChunkapp_wheel_docs=self.webpackChunkapp_wheel_docs||[]).push([[434],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(n),h=i,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||s;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4780:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return d}});var r=n(7462),i=n(3366),s=(n(7294),n(3905)),o=["components"],a={sidebar_position:3,title:"iOS Integration Document",id:"iOS-Integration-Document"},c="iOS Integration Document (External Use)",l={unversionedId:"AppWheel/iOS-Integration-Document",id:"AppWheel/iOS-Integration-Document",title:"iOS Integration Document",description:"1. Installation",source:"@site/docs/AppWheel/iOS Integration Document.md",sourceDirName:"AppWheel",slug:"/AppWheel/iOS-Integration-Document",permalink:"/docs/AppWheel/iOS-Integration-Document",editUrl:"https://https://github.com/Pixocial/AppWheel-Docs/docs/AppWheel/iOS Integration Document.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"iOS Integration Document",id:"iOS-Integration-Document"},sidebar:"tutorialSidebar",previous:{title:"Android Integration Documentation",permalink:"/docs/AppWheel/Android-Integration-Documentation"}},u={},d=[{value:"1. Installation",id:"1-installation",level:2},{value:"2. SDK Initialization",id:"2-sdk-initialization",level:2},{value:"Description:",id:"description",level:3},{value:"Parameters:",id:"parameters",level:3},{value:"3. Get Products",id:"3-get-products",level:2},{value:"Description:",id:"description-1",level:3},{value:"Parameters:",id:"parameters-1",level:3},{value:"Return:",id:"return",level:3},{value:"4. Purchase Products",id:"4-purchase-products",level:2},{value:"Description:",id:"description-2",level:3},{value:"Parameters:",id:"parameters-2",level:3},{value:"5. Restore Purchase",id:"5-restore-purchase",level:2},{value:"Description:",id:"description-3",level:3},{value:"6. View User Benefits",id:"6-view-user-benefits",level:2},{value:"Telling if there is an ongoing subscription service",id:"telling-if-there-is-an-ongoing-subscription-service",level:3},{value:"Description:",id:"description-4",level:4},{value:"Obtain the existing valid subscriptions",id:"obtain-the-existing-valid-subscriptions",level:3},{value:"Description:",id:"description-5",level:4},{value:"Obtain the currently owned non-consumable and non-renewable subscription products.",id:"obtain-the-currently-owned-non-consumable-and-non-renewable-subscription-products",level:3},{value:"Description:",id:"description-6",level:4},{value:"7. Adding a global listener",id:"7-adding-a-global-listener",level:2},{value:"Description:",id:"description-7",level:3}],p={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ios-integration-document-external-use"},"iOS Integration Document (External Use)"),(0,s.kt)("h2",{id:"1-installation"},"1. Installation"),(0,s.kt)("p",null,"###The integration should be done with CocoaPods and the following orders should be added to Podfile."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"pod 'AppWheel'\n")),(0,s.kt)("p",null,"The latest version can be obtained through the official website or by executing pod search AppWheel.\nAll methods support Swift calls. Please add the following sentences to the Bridging-Header file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"import <PurchaseSDK/AWPurchaseKit.h>\n")),(0,s.kt)("blockquote",null,(0,s.kt)("font",{color:"red"},"**Note: This SDK only supports the real machine rather than a simulator for the time being.**")),(0,s.kt)("h2",{id:"2-sdk-initialization"},"2. SDK Initialization"),(0,s.kt)("h3",{id:"description"},"Description:"),(0,s.kt)("p",null," The SDK initialization method is as follows. Please initialize the SDK in your app as soon as possible according to your own situation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"///Please use the following method for versions older than 2.0.1.3.  \nAWPurchaseKit configureWithAppId:appid \n                             uid:userId     \n                      completion:^(BOOL success, AWError * _Nonnull error) {\n    if (success) {\n      //init success ,do something\n    } else {\n      // init failed,check error\n    }\n  }\n  \n  ///Use the following method for version 2.0.1.3 and above.  \n[AWPurchaseKit configureWithAppId:appId \n                           secret:appSecret\n                              uid:userId\n                       completion:^(BOOL success, AWError * _Nonnull error) {\n                 if (success) {\n                  //init success ,do something\n                } else {\n                  // init failed,check error\n                }\n  }];\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"///Please use the following method for versions older than 2.0.1.3.  \nAWPurchaseKit.configure(withAppId: appId, \n                              uid: uid) { [weak self](success, error) in\n      if success == false {\n        // init failed,check error\n      } else {\n        //init success ,do something\n      }\n    }\n    \n ///Use the following method for version 2.0.1.3 and above.\n AWPurchaseKit.configure(withAppId: appId, \n                            secret:appSecret \n                               uid: uid) { [weak self](success, error) in\n      if success == false {\n        // init failed,check error\n      } else {\n        //init success ,do something\n      }\n    }\n")),(0,s.kt)("h3",{id:"parameters"},"Parameters:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"\u2022   appId: Generated by AW server. For the generation steps, please refer to the document: New Application (External Use)\n\u2022   secret: Added in V2.0.1.3 and is generated by AW server. For the generation steps, please refer to the document: New Application (External Use)\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"uid: userId should not be empty value."),(0,s.kt)("li",{parentName:"ul"},"completion: Initialization result's block. Returns 'true' if initialization is successful; returns 'false' if not. This component can not be used in the case of configuration failure. ")),(0,s.kt)("h2",{id:"3-get-products"},"3. Get Products"),(0,s.kt)("h3",{id:"description-1"},"Description:"),(0,s.kt)("p",null," This method is used to acquire product information. The product information should be loaded before displaying product page."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[AWPurchaseKit getProductsInfoWithProductIdentifiers:self.skuSet \n                                          completion:^(RetrievedProducts * _Nonnull retrievedProducts) {\n      if (retrievedProducts.error) {\n       // request error,check error msg\n        return;\n      }\n      if (retrievedProducts.validProducts.count){\n        dispatch_async(dispatch_get_main_queue(), ^{\n        // request success, updateUI\n        //  [self updateUI];\n        });\n      }\n      if (retrievedProducts.invalidProductIdentifiers.count) {\n        //find invalid sku, check your sku\n      }\n    }];\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getProductsInfo(withProductIdentifiers: productIds) { [weak self] (result) in\n          if let error = result.error {\n            //request error,check error msg\n          } else {\n            let valid_products = result.validProducts\n            //request success, updateUI\n          }\n  }\n")),(0,s.kt)("h3",{id:"parameters-1"},"Parameters:"),(0,s.kt)("p",null," productIdentifiers: Collection of SKU IDs."),(0,s.kt)("h3",{id:"return"},"Return:"),(0,s.kt)("p",null," The RetrievedProducts returned includes AWProduct array of successfully obtained products, SKU array of products failed to be obtained and AWError objects.\nAWProduct Data Structure: ","[AppWheel SDK Integration Document - Introduction to iOS Classes]","(docs\\appwheel\\Android Integration Documentation.md)"),(0,s.kt)("h2",{id:"4-purchase-products"},"4. Purchase Products"),(0,s.kt)("h3",{id:"description-2"},"Description:"),(0,s.kt)("p",null," This method should be called to complete a purchase when a user has selected a product. The developers should tell the product type before calling this method and then pass the productType to complete the purchase."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[AWPurchaseKit purchaseProduct:product \n                      quantity:quantity \n                   AWProducts \n               paymentDiscount:paymentDiscount completion:^(BOOL success, AWError * _Nonnull error) {\n                if (!success) {\n                  //purchase failed, check error\n                }else {\n                  //purchase success\n                }\n          }];\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.purchaseProduct(product, \n                     quantity: 1, \n                  productType: AWProductType, \n              paymentDiscount: nil) { success, error in\n        if success {\n          //purchase success\n        } else {\n          //purchase failed, check error\n        }\n      }\n")),(0,s.kt)("h3",{id:"parameters-2"},"Parameters:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"product: Products"),(0,s.kt)("li",{parentName:"ul"},"paymentDiscount: Discounts. Only for subscription products and can be acquired through Product.discounts. No transferable nil. "),(0,s.kt)("li",{parentName:"ul"},"quantity: The quantity of purchases. The quantity of subscription products is 1, as is other product types."),(0,s.kt)("li",{parentName:"ul"},"productType: Product types, which can be determined according to the SKU. There are four product types: (0: Consumable product, 1: Non-consumable product, 2: Auto-renewal subscription, and 3: Non-automatic renewal subscription) Please refer to the AWProductType in ","[AppWheel SDK Integration Document - Introduction to iOS Classes]","(docs\\appwheel\\Android Integration Documentation.md).")),(0,s.kt)("h2",{id:"5-restore-purchase"},"5. Restore Purchase"),(0,s.kt)("h3",{id:"description-3"},"Description:"),(0,s.kt)("p",null," This is used to restore valid subscriptions, non-consumable products, and non-renewable products for a user. When there is no valid subscription, the 'success' in the block will return a false value. Calling this interface will directly call the AppleService verification interface and there is a quota restriction for this interface for each app. ",(0,s.kt)("font",{color:"red"}," ",(0,s.kt)("strong",{parentName:"p"},"It is strictly prohibited to call when starting the app and to call it too frequently. "))," It is recommended to call it only when the purchase information fails to be inquired because the user changed their phone or reinstalled the app."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[AWPurchaseKit restorePurchaseWithCompletion:^(BOOL success, \n                                            NSArray * validSubscriptions, \n                                            NSArray * purchasedItems, \n                                            AWError * error) {\n    //do something\n  }];\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.restorePurchase { (success, validSubscriptions, productIds, error) in\n      //do something\n      }\n")),(0,s.kt)("h2",{id:"6-view-user-benefits"},"6. View User Benefits"),(0,s.kt)("h3",{id:"telling-if-there-is-an-ongoing-subscription-service"},"Telling if there is an ongoing subscription service"),(0,s.kt)("h4",{id:"description-4"},"Description:"),(0,s.kt)("p",null," Tell if a user has an ongoing subscription service. If yes, this method can be used to tell the benefits the user enjoys."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[[AWPurchaseKit getPurchaseInfo] isSubscriptionUnlockedUser]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getPurchaseInfo().isSubscriptionUnlockedUser()\n")),(0,s.kt)("h3",{id:"obtain-the-existing-valid-subscriptions"},"Obtain the existing valid subscriptions"),(0,s.kt)("h4",{id:"description-5"},"Description:"),(0,s.kt)("p",null," It is used to tell a user's existing valid subscription."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[[AWPurchaseKit getPurchaseInfo] getCurrentValidSubscriptions]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getPurchaseInfo().getCurrentValidSubscriptions()\n")),(0,s.kt)("h3",{id:"obtain-the-currently-owned-non-consumable-and-non-renewable-subscription-products"},"Obtain the currently owned non-consumable and non-renewable subscription products."),(0,s.kt)("h4",{id:"description-6"},"Description:"),(0,s.kt)("p",null," It is used to obtain the consumable, non-consumable, and non-renewable subscription items currently owned by the user."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"[[AWPurchaseKit getPurchaseInfo] purchasedArray]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"AWPurchaseKit.getPurchaseInfo().purchasedArray()\n")),(0,s.kt)("h2",{id:"7-adding-a-global-listener"},"7. Adding a global listener"),(0,s.kt)("h3",{id:"description-7"},"Description:"),(0,s.kt)("p",null," This method is used to add a global listener, which will be called after purchase, subscription renewal, and/or restoring purchases. Developers should set up listeners as soon as possible after initialization for callbacks in a timely manner."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Objective-C"},"///Adding a listener\n[AWPurchaseKit addPurchaseObserver:AWPurchaseObserver];\n///Remove listener\n[AWPurchaseKit removePurchaseObserver:self]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Swift"},"///Adding a listener\nAWPurchaseKit.add(AWPurchaseObserver)\n///Remove listener\nAWPurchaseKit.remove(AWPurchaseObserver)\n")))}h.isMDXComponent=!0}}]);